//since we are using client-de features
"use client"
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "../components/app-sidebar";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";
import makeStore from "./config/store";
import { useAppSelector } from "./config/hook";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const { store, persistor } = makeStore();

function AuthWrapper({ children }: { children: React.ReactNode }) {
  const user = useAppSelector((state) => state.user);
  const isAuthenticated = !!user.id;

  if (!isAuthenticated) {
    return <>{children}</>
  }

  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistor}>
            <AuthWrapper>
              {/* <SidebarTrigger /> */}
              {children}
            </AuthWrapper>
          </PersistGate>
        </Provider>
      </body>
    </html>
  );
}
